*	Class			CMPS450
*	Section			001
*	Problem			Snobol Semester Project (first draft)
*	Name			McKelvy, James Markus
*	CLID			jmm0468
*	Due Date		10:00pm September 19, 2007
*
*	[ALGOL_RECOGNIZER.SNO]
*
*	Takes an Algol60 program as input and outputs "Yes" or "No"
*	if it is a syntactically correct program or not.
*
*	TODO/fixme
*	add example detailed description about what was done for an example
*		production
*	source code separately
*	turn left recursion into right recursion (p103-p105)
*	dummy statement handling ;;
*
********************************************************************************
*	set max string length
	&MAXLNGTH = 32767

*	Define all patterns which are reproductions of Algol 60 BNFs
	EMPTY = ""
	LETTER = ANY("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ")
	DIGIT = ANY("0123456789")
	LOGICAL_VALUE = "true" | "false"
	ADDING_OPERATOR = ANY("+-")
	MULTIPLYING_OPERATOR = ANY("X/")
	ARITHMETIC_OPERATOR = "^" | *MULTIPLYING_OPERATOR | *ADDING_OPERATOR
	RELATIONAL_OPERATOR = "<=" | "<" | "=" | ">=" | ">" | "\="
	LOGICAL_OPERATOR = "==" | "->" | "or" | "and" | "not"
	SEQUENTIAL_OPERATOR = "goto" | "if" | "then" | "else" | "for" | "do"
	OPERATOR = *SEQUENTIAL_OPERATOR | *LOGICAL_OPERATOR | *RELATIONAL_OPERATOR | *ARITHMETIC_OPERATOR
	SEPARATOR = ":=" | ANY("#,.:;") | "step" | "until" | "while" | "comment"
	BRACKET = ANY(")(]['") | "begin" | "end"
	DECLARATOR = "own" | "Boolean" | "integer" | "real" | "array" | "switch" | "procedure"
	SPECIFICATOR = "string" | "label" | "value"
	DELIMITER = *SPECIFICATOR | *DECLARATOR | *BRACKET | *SEPARATOR | *OPERATOR
	BASIC_SYMBOL = (*DELIMITER | *LOGICAL_VALUE | *DIGIT | *LETTER)
	IDENTIFIER = *IDENTIFIER (*LETTER | *DIGIT) | *LETTER
	
	UNSIGNED_INTEGER = *UNSIGNED_INTEGER *DIGIT | *DIGIT
	UNSIGNED_NUMBER = *UNSIGNED_INTEGER "." *UNSIGNED_INTEGER | "." *UNSIGNED_INTEGER | *UNSIGNED_INTEGER
	NUMBER = "+" *UNSIGNED_NUMBER | "-" *UNSIGNED_NUMBER | *UNSIGNED_NUMBER
	
	STRING_ELEMENT = LETTER | DIGIT | ANY(")(][#,.:;=+-X/\^<>") | '"'
	STRING_CONTENTS = *STRING_CONTENTS *STRING_ELEMENT | *STRING_ELEMENT
	STRING = "'" *STRING_CONTENTS "'" | "''"

	EXPRESSION = (*ARITHMETIC_EXPRESSION | *BOOLEAN_EXPRESSION | *DESIGNATIONAL_EXPRESSION)

	SUBSCRIPT_LIST = *SUBSCRIPT_LIST "," *ARITHMETIC_EXPRESSION | *ARITHMETIC_EXPRESSION
	SUBSCRIPTED_VARIABLE = *IDENTIFIER "[" *SUBSCRIPT_LIST "]"
	VARIABLE = *SUBSCRIPTED_VARIABLE | *IDENTIFIER

	LETTER_STRING = *LETTER_STRING *LETTER | *LETTER
	PARAMETER_DELIMITER = "," | ")" *LETTER_STRING ":("
	ACTUAL_PARAMETER = *STRING | *EXPRESSION | *IDENTIFIER
	ACTUAL_PARAMETER_LIST = *ACTUAL_PARAMETER_LIST *PARAMETER_DELIMITER *ACTUAL_PARAMETER | *ACTUAL_PARAMETER
	ACTUAL_PARAMETER_PART = "(" *ACTUAL_PARAMETER_LIST ")"
	FUNCTION_DESIGNATOR = *IDENTIFIER *ACTUAL_PARAMETER_PART | *IDENTIFIER

*	fixme!!
	PRIMARY = "(" *ARITHMETIC_EXPRESSION ")" | *SUBSCRIPTED_VARIABLE | *FUNCTION_DESIGNATOR | *VARIABLE | *UNSIGNED_NUMBER
	FACTOR = (*FACTOR "^" *PRIMARY | *PRIMARY)
*	FACTOR = *PRIMARY "^" ARBNO(*PRIMARY) | *PRIMARY
	TERM = (*TERM *MULTIPLYING_OPERATOR *FACTOR | *FACTOR)
*	left recursion rewrite
*	TERM = *FACTOR *MULTIPLYING_OPERATOR *FACTOR ARBNO(*MULTIPLYING_OPERATOR *FACTOR) | *FACTOR
	SIMPLE_ARITHMETIC_EXPRESSION = *SIMPLE_ARITHMETIC_EXPRESSION *ADDING_OPERATOR *TERM | *ADDING_OPERATOR *TERM | *TERM
	ARITHMETIC_EXPRESSION =  *IF_CLAUSE *SIMPLE_ARITHMETIC_EXPRESSION "else" *ARITHMETIC_EXPRESSION | *SIMPLE_ARITHMETIC_EXPRESSION

	RELATION = *ARITHMETIC_EXPRESSION *RELATIONAL_OPERATOR *ARITHMETIC_EXPRESSION
	BOOLEAN_PRIMARY = *RELATION | *FUNCTION_DESIGNATOR | *LOGICAL_VALUE | *VARIABLE | "(" *BOOLEAN_EXPRESSION ")"
	BOOLEAN_SECONDARY = "not" *BOOLEAN_PRIMARY | *BOOLEAN_PRIMARY
	BOOLEAN_FACTOR = *BOOLEAN_FACTOR "and" *BOOLEAN_SECONDARY | *BOOLEAN_SECONDARY
	BOOLEAN_TERM = *BOOLEAN_TERM "or" *BOOLEAN_FACTOR | *BOOLEAN_FACTOR
	IMPLICATION = *IMPLICATION "->" *BOOLEAN_TERM | *BOOLEAN_TERM 
	SIMPLE_BOOLEAN = *SIMPLE_BOOLEAN "==" *IMPLICATION | *IMPLICATION
	BOOLEAN_EXPRESSION = *IF_CLAUSE *SIMPLE_BOOLEAN "else" *BOOLEAN_EXPRESSION | *SIMPLE_BOOLEAN

	LABEL = *IDENTIFIER | *UNSIGNED_INTEGER
	SWITCH_DESIGNATOR = *IDENTIFIER "[" *ARITHMETIC_EXPRESSION "]"
	SIMPLE_DESIGNATIONAL_EXPRESSION = *SWITCH_DESIGNATOR | *LABEL | "(" *DESIGNATIONAL_EXPRESSION ")"
	DESIGNATIONAL_EXPRESSION = *IF_CLAUSE *SIMPLE_DESIGNATIONAL_EXPRESSION "else" *DESIGNATIONAL_EXPRESSION | *SIMPLE_DESIGNATIONAL_EXPRESSION

	LEFT_PART_LIST = *LEFT_PART_LIST *VARIABLE ":=" | *VARIABLE ":="
*	fixme!
*	ASSIGNMENT_STATEMENT = *LEFT_PART_LIST *BOOLEAN_EXPRESSION | *LEFT_PART_LIST *ARITHMETIC_EXPRESSION
	ASSIGNMENT_STATEMENT = *LEFT_PART_LIST *ARITHMETIC_EXPRESSION *RELATIONAL_OPERATOR *ARITHMETIC_EXPRESSION | *LEFT_PART_LIST *ARITHMETIC_EXPRESSION | *LEFT_PART_LIST *BOOLEAN_EXPRESSION 

	GOTO_STATEMENT = "goto" *DESIGNATIONAL_EXPRESSION

*	fixme...use this?
*	DUMMY_STATEMENT = EMPTY

	FOR_LIST_ELEMENT = (*ARITHMETIC_EXPRESSION "while" *BOOLEAN_EXPRESSION | *ARITHMETIC_EXPRESSION "step" *ARITHMETIC_EXPRESSION "until" *ARITHMETIC_EXPRESSION | *ARITHMETIC_EXPRESSION)
	FOR_LIST = *FOR_LIST "," *FOR_LIST_ELEMENT | *FOR_LIST_ELEMENT
	FOR_CLAUSE = *FOR_CLAUSE "for" *VARIABLE ":=" *FOR_LIST "do" | "for" *VARIABLE ":=" *FOR_LIST "do"
	FOR_STATEMENT = *LABEL ":" *FOR_STATEMENT | *FOR_CLAUSE *STATEMENT
	PROCEDURE_STATEMENT = *IDENTIFIER *ACTUAL_PARAMETER_PART
	DECLARATION = *PROCEDURE_DECLARATION | *SWITCH_DECLARATION | *ARRAY_DECLARATION | *TYPE_DECLARATION

	TYPE_LIST = *IDENTIFIER "," *TYPE_LIST | *IDENTIFIER
	TYPE = "real" | "integer" | "Boolean"
	LOCAL_OR_OWN_TYPE = "own" *TYPE | *TYPE
	TYPE_DECLARATION = *LOCAL_OR_OWN_TYPE *TYPE_LIST

	BOUND_PAIR_LIST = *BOUND_PAIR_LIST "," *ARITHMETIC_EXPRESSION ":" *ARITHMETIC_EXPRESSION | *ARITHMETIC_EXPRESSION ":" *ARITHMETIC_EXPRESSION
	ARRAY_SEGMENT = *IDENTIFIER "," *ARRAY_SEGMENT | *IDENTIFIER "[" *BOUND_PAIR_LIST "]"
	ARRAY_LIST = *ARRAY_LIST "," *ARRAY_SEGMENT | *ARRAY_SEGMENT
	ARRAY_DECLARATION = *LOCAL_OR_OWN_TYPE "array" *ARRAY_LIST | "array" *ARRAY_LIST

	SWITCH_LIST = *SWITCH_LIST "," *DESIGNATIONAL_EXPRESSION | *DESIGNATIONAL_EXPRESSION
	SWITCH_DECLARATION = "switch" *IDENTIFIER ":=" *SWITCH_LIST

	FORMAL_PARAMETER_LIST = *FORMAL_PARAMETER_LIST *PARAMETER_DELIMITER *IDENTIFIER | *IDENTIFIER
	FORMAL_PARAMETER_PART = "(" *FORMAL_PARAMETER_LIST ")"
	IDENTIFIER_LIST = *IDENTIFIER_LIST "," *IDENTIFIER | *IDENTIFIER
	VALUE_PART = "value" *IDENTIFIER_LIST ";"
	SPECIFIER = "string" | *TYPE "array" | "array" | "label" | "switch" | *TYPE "procedure" | "procedure" | *TYPE 
	SPECIFICATION_PART = *SPECIFICATION_PART *SPECIFIER *INDENTIFIER_LIST ";" | *SPECIFIER *IDENTIFIER_LIST ";"
	PROCEDURE_HEADING = *IDENTIFIER *FORMAL_PARAMETER_PART ";" *VALUE_PART *SPECIFICATION_PART | *IDENTIFIER ";" *VALUE_PART *SPECIFICATION_PART | *IDENTIFIER *FORMAL_PARAMETER_PART ";" *SPECIFICATION_PART | *IDENTIFIER ";" *SPECIFICATION_PART | *IDENTIFIER *FORMAL_PARAMETER_PART ";" | *IDENTIFIER ";" 
	PROCEDURE_DECLARATION = *TYPE "procedure" *PROCEDURE_HEADING *STATEMENT | "procedure" *PROCEDURE_HEADING *STATEMENT

	IF_CLAUSE = "if" *BOOLEAN_EXPRESSION "then"
*	fixme?
	UNCONDITIONAL_STATEMENT = *BLOCK | *COMPOUND_STATEMENT | *FOR_STATEMENT | *BASIC_STATEMENT
	IF_STATEMENT = *LABEL ":" *IF_STATEMENT | *IF_CLAUSE *UNCONDITIONAL_STATEMENT
	CONDITIONAL_STATEMENT = *IF_STATEMENT "else" *STATEMENT | *IF_STATEMENT 

	UNLABELLED_BASIC_STATEMENT = *PROCEDURE_STATEMENT | *GOTO_STATEMENT | *ASSIGNMENT_STATEMENT
	BASIC_STATEMENT = *LABEL ":" *BASIC_STATEMENT | *UNLABELLED_BASIC_STATEMENT
	STATEMENT = *CONDITIONAL_STATEMENT | *UNCONDITIONAL_STATEMENT
	COMPOUND_TAIL = *STATEMENT ";" *COMPOUND_TAIL | *STATEMENT "end"
	COMPOUND_STATEMENT = *LABEL ":" *COMPOUND_STATEMENT | "begin" *COMPOUND_TAIL
	BLOCK_HEAD = *BLOCK_HEAD ";" *DECLARATION | "begin" *DECLARATION
	BLOCK = *LABEL ":" *BLOCK | *BLOCK_HEAD ";" *COMPOUND_TAIL

*	Get input
*	Remove whitespace and algol comments from input
* 	Whitespace includes space, tab, newline.
	
	WHITESPACE = " " | "	"
	COMMENT = "comment"
	SEMICOLON = ";"

REM	
*	begin removing unnecessary elements
	LINE COMMENT BREAK(SEMICOLON) SEMICOLON = 
	LINE WHITESPACE =							:S(REM)
*	read in next line, append to current line
	INPUT('TMPLINE',5,32767)	
	LINE = LINE TMPLINE							:S(REM)

*	Unit tests of individual patterns
*	Replace with main pattern when complete with tests

LOOP
*	LINE IDENTIFIER = "*"	:S(LOOP)
*	LINE NUMBER = "*"	:S(LOOP)
*	LINE STRING = "*"	:S(LOOP)
*	LINE VARIABLE = "*"	:S(LOOP)
*	LINE FUNCTION_DESIGNATOR = "*"	:S(LOOP)
	LINE ARITHMETIC_EXPRESSION = "*"	:S(LOOP)
*	LINE BOOLEAN_EXPRESSION = "*"	:S(LOOP)
*	LINE DESIGNATIONAL_EXPRESSION = "*"	:S(LOOP)
*	LINE BASIC_STATEMENT = "*"	:S(LOOP)
*	LINE COMPOUND_STATEMENT = "*"	:S(LOOP)
*	LINE ASSIGNMENT_STATEMENT = "*"	:S(LOOP)
*	LINE GOTO_STATEMENT = "*"	:S(LOOP)
*	LINE CONDITIONAL_STATEMENT = "*"	:S(LOOP)
*	LINE FOR_STATEMENT = "*"	:S(LOOP)
*	LINE PROCEDURE_STATEMENT = "*"	:S(LOOP)
*	LINE TYPE_DECLARATION = "*" :S(LOOP)
*	LINE ARRAY_DECLARATION = "*" :S(LOOP)
*	LINE SWITCH_DECLARATION = "*" :S(LOOP)
*	LINE PROCEDURE_DECLARATION = "*"	:S(LOOP)
*	LINE BLOCK = "*"			   	 		:S(LOOP)

*	Check if all patterns matched successfully
*	OUTPUT = 
	OUTPUT = LINE
	LINE POS(0) "*" ARBNO("*") RPOS(0) 				:S(YES)F(NO)

*	Valid Algol 60
YES	OUTPUT = "Yes"							:(END)
*	Not valid Algol 60
NO	OUTPUT = "No"							:(END)
END
