III. Implementation Documentation

III.1 Source Code

*	Class			CMPS450
*	Section			001
*	Problem			Snobol Semester Project
*	Name			McKelvy, James Markus
*	CLID			jmm0468
*	Due Date		10:00pm November 19, 2007
*
*	[ALGOL_RECOGNIZER.SNO]
*
*	Takes an Algol60 program as input and outputs "Yes" or "No"
*	if it is a syntactically correct program or not.
*
*
********************************************************************************
*	set max string length
	&MAXLNGTH = 32767

*	Define all patterns which are reproductions of Algol 60 BNFs
	EMPTY = ""
	LETTER = ANY(&UCASE &LCASE)
	NON_MULT_LETTER = ANY("abcdefghijklmnopqrstuvwyz")
	DIGIT = ANY("0123456789")
	LOGICAL_VALUE = "true" | "false"
	ADDING_OPERATOR = "+" | "-"
	MULTIPLYING_OPERATOR = "X" | "/"
	ARITHMETIC_OPERATOR = "^" | *MULTIPLYING_OPERATOR | *ADDING_OPERATOR
	RELATIONAL_OPERATOR = "<=" | "<" | "=" | ">=" | ">" | "\="
	LOGICAL_OPERATOR = "==" | "->" | "or" | "and" | "not"
	SEQUENTIAL_OPERATOR = "goto" | "if" | "then" | "else" | "for" | "do"
	OPERATOR = *SEQUENTIAL_OPERATOR | *LOGICAL_OPERATOR | *RELATIONAL_OPERATOR | *ARITHMETIC_OPERATOR
	SEPARATOR = ":=" | ANY("#,.:;") | "step" | "until" | "while" | "comment"
	BRACKET = ANY(")(]['") | "begin" | "end"
	DECLARATOR = "own" | "Boolean" | "integer" | "real" | "array" | "switch" | "procedure"
	SPECIFICATOR = "string" | "label" | "value"
	DELIMITER = *SPECIFICATOR | *DECLARATOR | *BRACKET | *SEPARATOR | *OPERATOR
	BASIC_SYMBOL = (*DELIMITER | *LOGICAL_VALUE | *DIGIT | *LETTER)

	IDENTIFIER = *IDENTIFIER (*LETTER | *DIGIT) | *LETTER

	UNSIGNED_INTEGER = *DIGIT *UNSIGNED_INTEGER | *DIGIT
*	used for reducing long numbers to a single digit
	UNSIGNED_INTEGER_MULTIDIGIT = *DIGIT *UNSIGNED_INTEGER | *DIGIT *DIGIT
	UNSIGNED_NUMBER = *UNSIGNED_INTEGER "." *UNSIGNED_INTEGER | "." *UNSIGNED_INTEGER | *UNSIGNED_INTEGER
	NUMBER = ("+" *UNSIGNED_NUMBER | "-" *UNSIGNED_NUMBER | *UNSIGNED_NUMBER)

*	used in quickly identifying a simple subscript that is not an arithmetic expression
	NUMBER_OR_IDENTIFIER = *NUMBER | *IDENTIFIER
	
	STRING_ELEMENT = LETTER | DIGIT | ANY(")(][#,.:;=+-X/\^<>") | '"'
	STRING_CONTENTS = *STRING_ELEMENT *STRING_CONTENTS | *STRING_ELEMENT
	STRING = "'" *STRING_CONTENTS "'" | "''"

	EXPRESSION = (*ARITHMETIC_EXPRESSION | *BOOLEAN_EXPRESSION | *DESIGNATIONAL_EXPRESSION)

*	used in quickly identifying a simple subscript that is not an arithmetic expression
	SIMPLE_SUBSCRIPTS = NUMBER_OR_IDENTIFIER ARBNO("," *SIMPLE_SUBSCRIPTS)

	SUBSCRIPTS = (*UNSIGNED_NUMBER | *VARIABLE | *ARITHMETIC_EXPRESSION) ARBNO("," *SUBSCRIPTS)
	SUBSCRIPTED_VARIABLE = *IDENTIFIER "[" *SUBSCRIPTS "]"
	VARIABLE = *IDENTIFIER "[" *SUBSCRIPTS "]" | *IDENTIFIER

	LETTER_STRING = *LETTER *LETTER_STRING | *LETTER
	ACTUAL_PARAMETER = (*STRING | *EXPRESSION | *IDENTIFIER)
	ACTUAL_PARAMETER_LIST = *ACTUAL_PARAMETER ")" *LETTER_STRING ":(" *ACTUAL_PARAMETER_LIST | *ACTUAL_PARAMETER "," *ACTUAL_PARAMETER_LIST | *ACTUAL_PARAMETER 
	FUNCTION_DESIGNATOR = *IDENTIFIER "(" *ACTUAL_PARAMETER_LIST ")" | *IDENTIFIER

	PRIMARY = "(" *ARITHMETIC_EXPRESSION ")" | *SUBSCRIPTED_VARIABLE | *FUNCTION_DESIGNATOR | *VARIABLE | *UNSIGNED_NUMBER
	FACTOR = *PRIMARY "^" *FACTOR | *PRIMARY
	TERM = *FACTOR *MULTIPLYING_OPERATOR *TERM | *FACTOR
	SIMPLE_ARITHMETIC_EXPRESSION = *TERM *ADDING_OPERATOR *SIMPLE_ARITHMETIC_EXPRESSION | *ADDING_OPERATOR *TERM | *TERM
	ARITHMETIC_EXPRESSION = *IF_CLAUSE *SIMPLE_ARITHMETIC_EXPRESSION "else" *ARITHMETIC_EXPRESSION | *SIMPLE_ARITHMETIC_EXPRESSION

	IF_CLAUSE = "if(" *BOOLEAN_EXPRESSION ")then" | "if" *BOOLEAN_EXPRESSION "then"
	RELATION = *ARITHMETIC_EXPRESSION *RELATIONAL_OPERATOR *ARITHMETIC_EXPRESSION 
*	alternate definition of boolean primary that was causing few issues
*	BOOLEAN_PRIMARY = *RELATION | *FUNCTION_DESIGNATOR | *LOGICAL_VALUE | *VARIABLE | *BOOLEAN_EXPRESSION
	BOOLEAN_PRIMARY = "(" *BOOLEAN_EXPRESSION ")" | *RELATION | *FUNCTION_DESIGNATOR | *VARIABLE | *LOGICAL_VALUE
	BOOLEAN_SECONDARY = "not" *BOOLEAN_PRIMARY | *BOOLEAN_PRIMARY
	BOOLEAN_FACTOR = *BOOLEAN_SECONDARY "and" *BOOLEAN_FACTOR | *BOOLEAN_SECONDARY
	BOOLEAN_TERM = *BOOLEAN_FACTOR "or" *BOOLEAN_TERM | *BOOLEAN_FACTOR
	IMPLICATION = *BOOLEAN_TERM "->" *IMPLICATION | *BOOLEAN_TERM 
	SIMPLE_BOOLEAN = *IMPLICATION "==" *SIMPLE_BOOLEAN | *IMPLICATION
	BOOLEAN_EXPRESSION = *IF_CLAUSE *SIMPLE_BOOLEAN "else" *BOOLEAN_EXPRESSION | *SIMPLE_BOOLEAN 

	LABEL = *IDENTIFIER | *UNSIGNED_INTEGER 
	SWITCH_DESIGNATOR = *IDENTIFIER "[" *ARITHMETIC_EXPRESSION "]"
	SIMPLE_DESIGNATIONAL_EXPRESSION = *SWITCH_DESIGNATOR | *LABEL | "(" *DESIGNATIONAL_EXPRESSION ")"
	DESIGNATIONAL_EXPRESSION = *IF_CLAUSE *SIMPLE_DESIGNATIONAL_EXPRESSION "else" *DESIGNATIONAL_EXPRESSION | *SIMPLE_DESIGNATIONAL_EXPRESSION

	LEFT_PART_LIST = *VARIABLE ":=" *LEFT_PART_LIST | *VARIABLE ":="
*	since the assignment state could go two ways (arithmetic | boolean) or (boolean | arithmetic)
*	the program first checks this way, if it fails then it gives the alternate definition for assignment 
*	statement and checks it
	ASSIGNMENT_STATEMENT = *LEFT_PART_LIST (*ARITHMETIC_EXPRESSION | *BOOLEAN_EXPRESSION)

	GOTO_STATEMENT = "goto" *DESIGNATIONAL_EXPRESSION
	DUMMY_STATEMENT = *LABEL ":"

	FOR_LIST_ELEMENT = *ARITHMETIC_EXPRESSION "while" *BOOLEAN_EXPRESSION | *ARITHMETIC_EXPRESSION "step" *ARITHMETIC_EXPRESSION "until" *ARITHMETIC_EXPRESSION | *ARITHMETIC_EXPRESSION
	FOR_LIST = *FOR_LIST_ELEMENT "," *FOR_LIST | *FOR_LIST_ELEMENT
	FOR_CLAUSE = "for" *VARIABLE ":=" *FOR_LIST "do" *FOR_CLAUSE | "for" *VARIABLE ":=" *FOR_LIST "do"
	FOR_STATEMENT = *LABEL ":" *FOR_STATEMENT | *FOR_CLAUSE *STATEMENT

	PROCEDURE_STATEMENT = *IDENTIFIER "(" *ACTUAL_PARAMETER_LIST ")"
	DECLARATION = *PROCEDURE_DECLARATION | *SWITCH_DECLARATION | *ARRAY_DECLARATION | *TYPE_DECLARATION

	TYPE_LIST = *IDENTIFIER "," *TYPE_LIST | *IDENTIFIER
	TYPE = "real" | "integer" | "Boolean"
	LOCAL_OR_OWN_TYPE = "own" *TYPE | *TYPE
	TYPE_DECLARATION = *LOCAL_OR_OWN_TYPE *TYPE_LIST

	BOUND_PAIR_LIST = *ARITHMETIC_EXPRESSION ":" *ARITHMETIC_EXPRESSION "," *BOUND_PAIR_LIST | *ARITHMETIC_EXPRESSION ":" *ARITHMETIC_EXPRESSION
	ARRAY_SEGMENT = *IDENTIFIER ("," *ARRAY_SEGMENT | "[" *BOUND_PAIR_LIST "]")
	ARRAY_LIST = *ARRAY_SEGMENT "," *ARRAY_LIST | *ARRAY_SEGMENT
	ARRAY_DECLARATION = *LOCAL_OR_OWN_TYPE "array" *ARRAY_LIST | "array" *ARRAY_LIST

	SWITCH_LIST = *SWITCH_LIST "," *DESIGNATIONAL_EXPRESSION | *DESIGNATIONAL_EXPRESSION
	SWITCH_DECLARATION = "switch" *IDENTIFIER ":=" *SWITCH_LIST

	FORMAL_PARAMETER_LIST = *IDENTIFIER ")" *LETTER_STRING ":(" *FORMAL_PARAMETER_LIST | *IDENTIFIER "," *FORMAL_PARAMETER_LIST | *IDENTIFIER
	FORMAL_PARAMETER_PART = "(" *FORMAL_PARAMETER_LIST ")"
	IDENTIFIER_LIST = *IDENTIFIER "," *IDENTIFIER_LIST | *IDENTIFIER
	VALUE_PART = "value" *IDENTIFIER_LIST ";"
	SPECIFIER = *TYPE ("procedure" | "array" | "") | ("procedure" | "array" | "switch" | "label" | "string")
	SPECIFICATION_PART = *SPECIFIER *IDENTIFIER_LIST ";" *SPECIFICATION_PART | *SPECIFIER *IDENTIFIER_LIST ";"
	PROCEDURE_HEADING = *IDENTIFIER (*FORMAL_PARAMETER_PART | "") ";" (*VALUE_PART | "") (*SPECIFICATION_PART | "")
	PROCEDURE_DECLARATION = *TYPE "procedure" *PROCEDURE_HEADING *STATEMENT | "procedure" *PROCEDURE_HEADING *STATEMENT

	UNCONDITIONAL_STATEMENT = *BLOCK | *COMPOUND_STATEMENT | *FOR_STATEMENT | *BASIC_STATEMENT
	IF_STATEMENT = *LABEL ":" *IF_STATEMENT | *IF_CLAUSE *UNCONDITIONAL_STATEMENT
	CONDITIONAL_STATEMENT = *IF_STATEMENT "else" *STATEMENT | *IF_STATEMENT 

	UNLABELLED_BASIC_STATEMENT = *ASSIGNMENT_STATEMENT | *GOTO_STATEMENT | *PROCEDURE_STATEMENT | *DUMMY_STATEMENT
	BASIC_STATEMENT = *LABEL ":" *BASIC_STATEMENT | *UNLABELLED_BASIC_STATEMENT
	STATEMENT = *CONDITIONAL_STATEMENT | *UNCONDITIONAL_STATEMENT
	COMPOUND_TAIL = *STATEMENT ";" *COMPOUND_TAIL | *STATEMENT "end"
	COMPOUND_STATEMENT = *LABEL ":" *COMPOUND_STATEMENT | "begin" *COMPOUND_TAIL
	BLOCK_DECLARATIONS = ";" *DECLARATION *BLOCK_DECLARATIONS | ";" *DECLARATION | ""
	BLOCK_HEAD = "begin" *DECLARATION *BLOCK_DECLARATIONS
	BLOCK = *LABEL ":" *BLOCK | *BLOCK_HEAD ";" *COMPOUND_TAIL

********************************************************************************
	WHITESPACE = " " | "	"
	COMMENT = "comment"
	SEMICOLON = ";"

*	begin removing unnecessary elements, such as comments, whitespace
*	read in each line, append to previous line
REM	
	LINE COMMENT BREAK(SEMICOLON) SEMICOLON = 
	LINE WHITESPACE =							:S(REM)
	INPUT('TMPLINE',5,32767)	
	LINE = LINE TMPLINE							:S(REM)

*	convert uppercase to lowercase
	LINE = REPLACE(LINE, "ABCDEFGHIJKLMNOPQRSTUVWYZ", "abcdefghijklmnopqrstuvwyz")

*	status echoes
*	OUTPUT =
*	OUTPUT = "Checking..."

*	any optimizations go here. these help speed up execution by simplifying complex elements
	LINE ANY("+-/^<>=,;[(") "," :S(NO)
	LINE "," ANY("/^<>=,;])") :S(NO)
	LINE ANY("=<>/") ":" :S(NO)
	LINE "]" NON_MULT_LETTER :S(ISEND)
	LINE "]" DIGIT :S(NO)
	:(OPT)

ISEND
	LINE "]end" :F(NO)

OPT 
*	OUTPUT = 
*	OUTPUT = "-> " LINE
	LINE UNSIGNED_INTEGER_MULTIDIGIT = "1" :S(OPT)
	LINE "[" SIMPLE_SUBSCRIPTS "]" = :S(OPT)
	LINE "," NUMBER_OR_IDENTIFIER "," = "," :S(OPT)
	LINE IDENTIFIER ":(" ACTUAL_PARAMETER_LIST ")" =	:S(OPT)
	LINE NUMBER MULTIPLYING_OPERATOR NUMBER NOTANY("abcdefghijklmnopqrstuvwyz") = "1" :S(OPT)
	LINE NUMBER ADDING_OPERATOR NUMBER NOTANY("abcdefghijklmnopqrstuvwyz") = "1" :S(OPT)
	LINE NUMBER "^" NUMBER = "1" :S(OPT)
	LINE "not" = "n" :S(OPT)
	LINE "and" = "or" :S(OPT)
	LINE "or" LETTER "or" = "or" :S(OPT)
	LINE "(" RELATION ")" = "a" :S(OPT)
*	LINE "(" SIMPLE_ARITHMETIC_EXPRESSION ")" = "A" :S(OPT)
	LINE "for" VARIABLE ":=" FOR_LIST "do" STATEMENT = "a:=a1a1a1a" :S(OPT)
	LINE ANY(",[]();") DIGIT NON_MULT_LETTER :S(NO)

*	previous statement may have gobbled an "end", fix it.
	LINE "a:=a1a1a1a" RPOS(0) = "a:=bend"
*	OUTPUT = "-> " LINE

*	make a backup of the input so it is easy to test alternative solution
	BKLINE = LINE

********************************************************************************
LOOP
*	Unit tests of individual patterns
*	LINE LETTER = "*" :S(LOOP)
*	LINE IDENTIFIER = "*"	:S(LOOP)
*	LINE NUMBER = "*"	:S(LOOP)
*	LINE STRING = "*"	:S(LOOP)
*	LINE SUBSCRIPTS = "*"	:S(LOOP)
*	LINE VARIABLE = "*"	:S(LOOP)
*	LINE FUNCTION_DESIGNATOR = "*"	:S(LOOP)
*	LINE ARITHMETIC_EXPRESSION = "*"	:S(LOOP)
*	LINE BOOLEAN_EXPRESSION = "*"	:S(LOOP)
*	LINE DESIGNATIONAL_EXPRESSION = "*"	:S(LOOP)
*	LINE BASIC_STATEMENT = "*"	:S(LOOP)
*	LINE COMPOUND_STATEMENT = "*"	:S(LOOP)
*	LINE BLOCK = "*"		:S(LOOP)
*	LINE ASSIGNMENT_STATEMENT = "*"				:S(LOOP)
*	LINE GOTO_STATEMENT = "*"	:S(LOOP)
*	LINE DUMMY_STATEMENT = "*"	:S(LOOP)
*	LINE CONDITIONAL_STATEMENT = "*"	:S(LOOP)
*	LINE FOR_STATEMENT = "*"	:S(LOOP)
*	LINE PROCEDURE_STATEMENT = "*"	:S(LOOP)
*	LINE TYPE_DECLARATION = "*" :S(LOOP)
*	LINE ARRAY_DECLARATION = "*" :S(LOOP)
*	LINE SWITCH_DECLARATION = "*" :S(LOOP)
*	LINE FORMAL_PARAMETER_LIST = "*"	:S(LOOP)
*	LINE STATEMENT = "*"	:S(LOOP)
	LINE PROCEDURE_DECLARATION = "*" :S(LOOP)

*	Check if all patterns matched successfully
*	OUTPUT = "=> " LINE
	LINE POS(0) SPAN("*") RPOS(0) :S(YES)

*	Try alternate assignment statement and see if it works
	ASSIGNMENT_STATEMENT = *LEFT_PART_LIST (*BOOLEAN_EXPRESSION | *ARITHMETIC_EXPRESSION)

TRYAGAINLOOP
	BKLINE PROCEDURE_DECLARATION = "*" :S(TRYAGAINLOOP)

*	Check if all patterns matched successfully
*	OUTPUT = "=> " BKLINE
	BKLINE POS(0) SPAN("*") RPOS(0) 				:S(YES)F(NO)

********************************************************************************
*	Valid Algol 60
YES	OUTPUT = "Yes"							:(END)

*	Not valid Algol 60
NO	OUTPUT = "No"							:(END)

END
